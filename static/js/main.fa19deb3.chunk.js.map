{"version":3,"sources":["logo.svg","todo.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Todo","props","changeTask","e","setState","inputValue","target","value","addList","list","state","deletFun","index","deleteIndex","slice","splice","changStyle","chanstl","filter","el","i","txt","isClicked","textdeco","className","type","id","placeholder","onChange","this","onClick","map","key","bind","style","textDecoration","val","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2JAAAA,EAAOC,QAAU,IAA0B,kC,wJC+F5BC,E,YA7FX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KASVC,WAAW,SAACC,GAER,EAAKC,SAAS,CAACC,WAAYF,EAAEG,OAAOC,SAZrB,EAgBnBC,QAAQ,WACJ,EAAKJ,SAAS,CACVK,KAAK,GAAD,mBAAK,EAAKC,MAAMD,MAAhB,CAAsB,CAAC,IAAM,EAAKC,MAAML,WAAW,IAAM,aAlBlD,EAwBnBM,SAAS,SAACC,GACR,IAAMC,EAAc,EAAKH,MAAMD,KAAKK,QAClCD,EAAYE,OAAOH,EAAM,GACzB,EAAKR,SAAS,CACbK,KAAMI,KA5BQ,EAkCnBG,WAAW,SAACJ,GACR,IAAMK,EAAU,EAAKP,MAAMD,KAAKS,QAAO,SAACC,EAAGC,GACvC,OAAqBD,EAAGE,IAArBT,GAAOQ,EAAmB,eACPD,EAAGE,OAE7B,EAAKjB,SAAS,CACVK,KAAMQ,KAtCV,EAAKP,MAAQ,CAETD,KAAM,GAAIJ,WAAW,GAAIiB,WAAW,EAAOC,SAAS,QAJzC,E,sEA+CT,IAAD,OACL,OAEI,iCAEI,gCACI,yBAAKC,UAAU,OACX,0CACA,6CACA,2BAAOC,KAAK,OAAQC,GAAG,aAAaC,YAAY,iBAAiBC,SAAUC,KAAK3B,aAChF,4BAAQwB,GAAG,SAASI,QAASD,KAAKrB,SAAlC,WAKR,8BACI,6BAASgB,UAAU,WACf,6BACI,0DAEJ,yBAAKA,UAAU,WAInB,6BAASA,UAAU,QAAQE,GAAG,UAC1B,yBAAKF,UAAU,YAAYE,GAAG,OAC3BG,KAAKnB,MAAMD,KAAKsB,KAAI,SAACZ,EAAIP,GAAL,OAAc,yBAAKoB,IAAMpB,EAAOY,UAAU,SAC3D,4BAAQA,UAAU,WAAWM,QAAS,EAAKd,WAAWiB,KAAK,EAAKrB,IAAhE,IAAsF,gBAATO,EAAGE,IAAqB,OAAO,WAA5G,MACA,4BAAQG,UAAU,SAAYM,QAAS,EAAKnB,SAASsB,KAAK,EAAKrB,IAA/D,YACA,0BAAMsB,MAAO,CAACC,eAAehB,EAAGE,MAAOF,EAAGiB,iB,GA7ErDC,aCUJC,MANf,WACE,OACF,kBAAC,EAAD,OCKoBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.fa19deb3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\nclass Todo extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n\r\n            list: [], inputValue:'', isClicked: false, textdeco:'none'\r\n        };\r\n       \r\n    }\r\n\r\n\r\n    changeTask=(e)=>{\r\n            \r\n        this.setState({inputValue: e.target.value});\r\n        \r\n        }\r\n\r\n    addList=()=>{\r\n        this.setState({\r\n            list:[...this.state.list, {\"val\":this.state.inputValue,\"txt\":\"none\"}]\r\n        })\r\n       \r\n    }\r\n    \r\n\r\n    deletFun=(index)=>{\r\n      const deleteIndex = this.state.list.slice()\r\n        deleteIndex.splice(index,1)\r\n        this.setState({\r\n         list: deleteIndex\r\n     })\r\n       \r\n\r\n    }\r\n    \r\n    changStyle=(index)=>{\r\n        const chanstl = this.state.list.filter((el,i)=>{\r\n            if(index==i) {return el.txt= 'line-through'   }\r\n            else { return el.txt= el.txt }\r\n        }   )\r\n        this.setState({\r\n            list: chanstl\r\n        })\r\n    }\r\n\r\n \r\n\r\n\r\n    render() { \r\n        return ( \r\n\r\n            <section>\r\n\r\n                <header>\r\n                    <div className=\"add\">\r\n                        <h1>To-Do App!</h1>\r\n                        <h4>Add New To-Do</h4>\r\n                        <input type=\"text\"  id=\"input-task\" placeholder=\"Enter new task\" onChange={this.changeTask} />  \r\n                        <button id=\"butadd\" onClick={this.addList}> Add </button> \r\n                    </div>\r\n\r\n                </header>\r\n\r\n                <main>\r\n                    <section className=\"main-up\">\r\n                        <div>\r\n                            <h2>Let's get some work done!</h2>\r\n                        </div>\r\n                        <div className=\"ligne\">\r\n                        </div>\r\n                    </section>\r\n\r\n                    <section className=\"tasks\" id=\"taskss\">\r\n                        <div className=\"edit-task\" id=\"old\">\r\n                          {this.state.list.map((el, index)=> <div key= {index} className='items'>\r\n                              <button className=\"complete\" onClick={this.changStyle.bind(this,index)}   > {el.txt== 'line-through'?'Undo':'Complete'}  </button>\r\n                              <button className=\"delete\"    onClick={this.deletFun.bind(this,index)}> delete </button>\r\n                              <span style={{textDecoration:el.txt}}>{el.val}</span>\r\n                              \r\n                              \r\n                              </div> )}\r\n                             \r\n                        </div>\r\n                    </section>\r\n\r\n                </main>\r\n\r\n            </section>\r\n\r\n\r\n         );\r\n    }\r\n}\r\n \r\nexport default Todo;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Todo from './todo';\n\nfunction App() {\n  return (\n<Todo/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}